<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="main" name="rddlsim">
    <description>
            		Build rddlsim and create JAR file.
    </description>
              	
                <property name="clientprojectName" value="Client" />
				<property name="serverprojectName" value="Server" />
            	<property name="src.dir" location="src" />
            	<property name="build.dir" location="bin" />
            	<property name="dist.dir" location="dist" />
            	<property name="dist.lib.dir" location="dist/lib" />
            	<property name="lib.dir" value="lib" />


            	<property name="client-class" value="rddl.competition.Client" />
				<property name="server-class" value="rddl.competition.Server" />
            	<target name="init">
            		<mkdir dir="${build.dir}" />
            	</target>
              	
    <path id="classpath">
        <pathelement location="bin"/>
        <pathelement location="lib/commons-math3-3.5.jar"/>
        <pathelement location="lib/java_cup.jar"/>
        <pathelement location="lib/jlex.jar"/>
        <pathelement location="lib/commons-collections4-4.0.jar"/>
        <pathelement location="lib/grappa1_4.jar"/>
		<pathelement location="lib/xml-apis.jar"/>
		<pathelement location="lib/xercesImpl.jar"/>
		<pathelement location="lib/junit-4.12.jar"/>
		<pathelement location="lib/JRIEngine.jar"/>
		<pathelement location="lib/REngine.jar"/>
		<pathelement location="lib/JRI.jar"/>
		<pathelement location="lib/gurobi.jar"/>


    </path>

   	
            	<!-- To work with external libraries, need classpath to compile -->
            	<target name="compile" depends="init" description="compile the source ">
            		<javac includeantruntime="false" srcdir="${src.dir}" destdir="${build.dir}" debug="on" debuglevel="lines,vars,source" classpathref="classpath"  />
            	</target>

            	<!-- constructs the external libraries classpath name -->
            	<pathconvert property="classpath.name" pathsep=" ">
            		<path refid="classpath" />
            		<mapper>
            			<chainedmapper>
            				<flattenmapper />
            				<globmapper from="*" to="lib/*" />
            			</chainedmapper>
            		</mapper>
            	</pathconvert>
            	
            	<target name="copy-dependencies">
            		<copy todir="${dist.lib.dir}">
            			<fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/*sources.jar, **/*javadoc.jar" />
            		</copy>
            	</target>
            	
            	 <!--jar it, and declares the ext libraries in manifest.mf file -->
            	<target name="jar" depends="compile, copy-dependencies" description="package, output to JAR">

            		<echo message="classpath.name : ${classpath.name} " />

            		<mkdir dir="${dist.dir}" />
            		<mkdir dir="${dist.lib.dir}" />



            		<jar jarfile="${dist.dir}/${clientprojectName}.jar" basedir="${build.dir}">
            			<manifest>
            				<attribute name="Main-Class" value="${client-class}" />
            				<attribute name="Class-Path" value=". ${classpath.name}" />
            			</manifest>
            			<fileset dir="." includes="*.properties" />
            		</jar>




					<jar jarfile="${dist.dir}/${serverprojectName}.jar" basedir="${build.dir}">
						<manifest>
							<attribute name="Main-Class" value="${server-class}" />
							<attribute name="Class-Path" value=". ${classpath.name}" />
						</manifest>
						<fileset dir="." includes="*.properties" />
					</jar>

            	</target>

              	
            	<target name="clean" description="clean up">
            		<delete dir="${build.dir}" />
            		<delete dir="${dist.dir}" />

            	</target>
            		
            		
            	<!-- Default, run this -->
            	<target name="main" depends="clean, compile, jar" />
</project>
