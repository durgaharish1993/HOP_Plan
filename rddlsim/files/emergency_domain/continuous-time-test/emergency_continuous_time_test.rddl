//continuous time 
//S. 1 station 1 team - boolean. various clocks for the team
//S. no call cause code - only call location
//A. Dispatch team or do nothing.
//1. simulate min of time of next call or next available time of team.
//2. calculate FC and FR correctly - accumulate over time steps

domain emergency_continuous_time_test{
	
	types {
		coordinate : object;
	};
	
	pvariables {
		//state variables
		currentCallTime : {state-fluent, real, default=0.0};
		
		currentCall(coordinate) : {state-fluent, real, default=0};
		timeServiceDone : {state-fluent, real, default=0.0};
		timeTarryDone :  {state-fluent, real, default=0.0};
		timeBackInBase : {state-fluent, real, default=0.0};
		lastVehicleService(coordinate) : {state-fluent, real, default=0.0};
		
		//derived fluents
		callMiles : {interm-fluent, real};
		callTravelTime : {interm-fluent, real};
		
		returnMiles : {interm-fluent, real};
		returnTravelTime : {interm-fluent, real}; 
		
		vehicleInService : {interm-fluent, bool};
		vehicleInBase : {interm-fluent, bool};
		vehicleOnSite : {interm-fluent, bool};
		
		//constants
		MapUpperBound(coordinate) : {non-fluent, real, default=0};
		MapLowerBound(coordinate) : {non-fluent, real, default=0};
		vehicleHome(coordinate) : {non-fluent, real, default=0.0};
		
		RoleServiceTime : {non-fluent, real, default=0.5};
		TarryTime : {non-fluent, real, default=0.25};
		FeetToMiles : {non-fluent, real, default=0.000189};
		MAX_INTER_ARRIVAL : {non-fluent, real, default=2.0};
		
		//action
		dispatch : {action-fluent, bool, default=false};
	};
	
	cpfs {
						
		currentCallTime' = currentCallTime + Uniform(0, MAX_INTER_ARRIVAL );
							  
		currentCall'(?c) = Uniform( MapLowerBound(?c), MapUpperBound(?c) );
		
		lastVehicleService'(?c) = if (dispatch) 
								  then currentCall(?c)
								  else if (vehicleInBase)
								  then vehicleHome(?c) 
								  else lastVehicleService(?c);
		
		callMiles = FeetToMiles*(if (vehicleInBase) 
						      then (sum_{?c:coordinate}[ abs[ vehicleHome(?c)-currentCall(?c) ] ])
							  else (sum_{?c:coordinate}[ abs[ lastVehicleService(?c)-currentCall(?c) ] ]));
		
		callTravelTime = if (callMiles <= 5) 
						 then callMiles/38.0
						 else if (callMiles > 5 ^ callMiles <= 7)
						 then callMiles/42.0
						 else if (callMiles > 7 ^ callMiles <= 12)
						 then callMiles/40.0
						 else if (callMiles > 12 ^ callMiles <= 15)
						 then callMiles/48.0
						 else if (callMiles > 15 ^ callMiles <= 17.5)
						 then callMiles/56.0
						 else if (callMiles > 17.5 ^ callMiles <= 20)
						 then callMiles/52.0
						 else if (callMiles > 20 ^ callMiles <= 25)
						 then callMiles/50.0
						 else if (callMiles > 25 ^ callMiles <= 28.5)
						 then callMiles/54.0
						 else if (callMiles > 28.5 ^ callMiles <= 41)
						 then callMiles/49.0
						 else if (callMiles > 41 ^ callMiles <= 70)
						 then callMiles/70.0
						 else if (callMiles > 70 ^ callMiles <= 500)
						 then callMiles/70.0
						 else callMiles/70.0;
						 
		returnMiles = FeetToMiles*( sum_{?c:coordinate}[ abs[ currentCall(?c) - vehicleHome(?c) ] ] );
		
		returnTravelTime = if (returnMiles<= 5) 
						 then returnMiles/38.0
						 else if (returnMiles > 5 ^ returnMiles <= 7)
						 then returnMiles/42.0
						 else if (returnMiles > 7 ^ returnMiles <= 12)
						 then returnMiles/40.0
						 else if (returnMiles > 12 ^ returnMiles <= 15)
						 then returnMiles/48.0
						 else if (returnMiles > 15 ^ returnMiles <= 17.5)
						 then returnMiles/56.0
						 else if (returnMiles > 17.5 ^ returnMiles <= 20)
						 then returnMiles/52.0
						 else if (returnMiles > 20 ^ returnMiles <= 25)
						 then returnMiles/50.0
						 else if (returnMiles > 25 ^ returnMiles <= 28.5)
						 then returnMiles/54.0
						 else if (returnMiles > 28.5 ^ returnMiles <= 41)
						 then returnMiles/49.0
						 else if (returnMiles > 41 ^ returnMiles <= 70)
						 then returnMiles/70.0
						 else if (returnMiles > 70 ^ returnMiles <= 500)
						 then returnMiles/70.0
						 else returnMiles/70.0;
							  
		timeServiceDone' = if (dispatch) 
						   then (currentCallTime + callTravelTime + RoleServiceTime)
						   else timeServiceDone;
						
		timeTarryDone' = if (dispatch)
					     then (currentCallTime + callTravelTime + RoleServiceTime + TarryTime) 
					     else timeTarryDone;
						
		timeBackInBase' = if (dispatch)
						  then (currentCallTime + callTravelTime + RoleServiceTime + 
								TarryTime + returnTravelTime)
						  else timeBackInBase;
								  
		vehicleInService = vehicleInBase | vehicleOnSite;
		
		vehicleInBase = (currentCallTime >= timeBackInBase);
		
		vehicleOnSite = [(currentCallTime >= timeServiceDone) ^ (currentCallTime < timeTarryDone)];	
		
	};
	
	reward = if (dispatch) then 1.0 else 0.0; //if (dispatch) then (-callTravelTime) else (-12);
	
	state-invariants {
		timeTarryDone >= timeServiceDone;
		timeBackInBase >= timeTarryDone;
		callMiles >= 0;
		callTravelTime >= 0;
		callMiles <= (sum_{?c:coordinate}[ MapUpperBound(?c)-MapLowerBound(?c) ]);
		currentCallTime >= 0;
		forall_{?c:coordinate}[ lastVehicleService(?c) <= MapUpperBound(?c) ];
		forall_{?c:coordinate}[ lastVehicleService(?c) >= MapLowerBound(?c) ];
		forall_{?c:coordinate}[ currentCall(?c) <= MapUpperBound(?c) ];
		forall_{?c:coordinate}[ currentCall(?c) >= MapLowerBound(?c) ];
		returnMiles >= 0;
		returnMiles <= (sum_{?c:coordinate}[ MapUpperBound(?c)-MapLowerBound(?c) ]);
		returnTravelTime >= 0;
	};
	
	action-preconditions {
		(~dispatch) | vehicleInService;
		//(~vehicleInService) | dispatch;
	};
}